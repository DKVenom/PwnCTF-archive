func1:
    sub    sp, sp, #16          // Allocate 16 bytes of stack space
    str    w0, [sp, 12]         // Store the first argument (w0) at sp+12
    str    w1, [sp, 8]          // Store the second argument (w1) at sp+8
    ldr    w1, [sp, 12]         // Load the first argument (w0) into w1
    ldr    w0, [sp, 8]          // Load the second argument (w1) into w0
    cmp    w1, w0               // Compare the first argument (w1) with the second (w0)
    bls    .L2                  // Branch to .L2 if w1 <= w0 (return w1)
    ldr    w0, [sp, 12]         // Load the first argument (w1) into w0
    b      .L3                  // Skip to the return point
.L2:
    ldr    w0, [sp, 8]          // Load the second argument (w0) into w0
.L3:
    add    sp, sp, 16           // Restore stack space
    ret                         // Return

main:
    stp    x29, x30, [sp, -48]! // Save frame pointers
    add    x29, sp, 0           // Set frame pointer
    str    x19, [sp, 16]        // Save x19 register
    str    w0, [x29, 44]        // Store argc (argument count)
    str    x1, [x29, 32]        // Store argv (argument vector)

    ldr    x0, [x29, 32]        // Load argv (address of arguments)
    add    x0, x0, 8            // Point to the first argument (argv[1])
    ldr    x0, [x0]             // Dereference argv[1]
    bl     atoi                 // Convert argv[1] to integer
    mov    w19, w0              // Store argv[1] integer result in w19

    ldr    x0, [x29, 32]        // Load argv (address of arguments)
    add    x0, x0, 16           // Point to the second argument (argv[2])
    ldr    x0, [x0]             // Dereference argv[2]
    bl     atoi                 // Convert argv[2] to integer
    mov    w1, w0               // Store argv[2] integer result in w1

    mov    w0, w19              // Move argv[1] integer result to w0
    bl     func1                // Call func1 with argv[1] (w0) and argv[2] (w1)

    mov    w1, w0               // Move func1's result into w1 for printf
    adrp   x0, .LC0             // Load address of "Result: %ld\n" format string
    add    x0, x0, :lo12:.LC0   // Load format string
    bl     printf               // Print the result

    mov    w0, 0                // Set return value to 0 (success)
    ldr    x19, [sp, 16]        // Restore x19 register
    ldp    x29, x30, [sp], 48   // Restore frame pointers and stack
    ret                         // Return


Given the arguments 4134207980 and 950176538:

The larger value between them is 4134207980.
picoCTF{f66b01ec}
